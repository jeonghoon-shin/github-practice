// 가장 쉬운 Git 강좌 - (상) 혼자작업편
// https://www.youtube.com/watch?v=FXDjmsiv8fI

0. git config --global user.name "이름"
0. git config --global user.email "메일"

0. git init
1. git status
2. git add -A
3. git commit -m "message"
4. git log

// 복원불가, 돌아갈 시점 git log 에서 보고 해쉬 앞 6자리 (그 커밋한 상태로 바뀜)
5. git reset 000000 --hard 

// 취소할 내역 중 가장 과거의 것을 선택, 그것의 바로 이전 커밋으로 돌아가는 새 커밋 작성
6. git revert 000000
7. git reset

// 브랜치 생성
// 체크아웃중인 브랜치를 기반으로 생성됨
8. git branch [branch-name]
// 브랜치 확인
9. git branch
// 브랜치 체크아웃(현재 브랜치 변경)
10. git checkout [branch-name]

// 브랜치 합치기(merge)
// 메인이 되는 브랜치로 체크아웃 후 사용
11. git merge [branch-name]

12. git log --graph --all --decorate

// 같은 파일, 같은 라인에 merge할 브랜치들에서 동시에 수정을 하면 conflict 발생
수정 -> git add [file] -> git commit

// 가급적 여러 사람이 동시에 같은 파일을 작업하는걸 피하는게 좋다 (conflict 피하는게 좋다)

// 여러 branch 간 병합 분기 기록을 하나로 합칠때 merge 대신 rebase(재배치)
13. git rebase [branch-name]

// 브랜치 삭제
14. git branch -D [branch-name]

//===============+===============+===============

// 가장 쉬운 Git 강좌 - (하) Github편
// https://www.youtube.com/watch?v=GaKjTjwcKQo

// 깃허브에 업로드
1) github 저장소 만들기 (초기화는 체크해제)
2) git status 로 상태 확인
3) git add 로 수정사항을 전부 커밋
4) git remote 로 원격 저장소가 등록되어 있는지 확인
5) github에 나온 명령어를 복붙 (원격 저장소명인 origin은 그대로 놔두는게 좋다) : remote add -> git push origin master (origin 저장소의 master 브랜치에 현재 브랜치의 커밋 내용들을 push, 원격 브랜치와 연동됨)

//===============+===============+===============

// .gitignore
코드를 실행하면 다운받아지는 패키지
코드를 빌드해서 생성되는 파일들
그때 그때 실행해서 만들수 있는 파일들

IDE 세팅

보안에서 중요한 파일들
DB 비밀번호 등

https://www.atlassian.com/git/tutorials/saving-changes/gitignore

파일 이름을 추가하면 git status에 나타나지 않는다

//===============+===============+===============

// 초대
Github - Settings - Manage access - Invite a collaborator

비공개 저장소를 보거나 push 할수있도록 초대

//===============+===============+===============

// git 원격 저장소 다운로드
git clone ...git

// 커밋 메세지: 협업할때 동료한테 이 커밋에서 어떤 수정이 이루어졌는지 알려줌

// 커밋 메세지 작성 방법 구글링 참조

// 원격 저장소에 새로운 변경이 있는지 확인
git fetch -> git status

// 원격 저장소에서 변경사항, 커밋내역 받아오기
// 협업시에는 작업이나 Push 하기 전에 항상 꼭 해주는게 좋다
// 괜한 작업이나 conflict가 나는 걸 방지하기 위해
// pull 하지 않으면 push 불가능
git pull origin master

//===============+===============+===============

// 브랜치 생성과 체크아웃 동시에
git checkout -b [branch-name]

// 브랜치 생성, 체크아웃, 원격 브랜치 pull 동시에
git checkout -b [branch-name] [remote-repo]/[remote-branch]
ex) git checkout -b my-idea origin/my-idea

// 원격 저장소에 새로운 브랜치 만들어서 push
// 또는 있던 브랜치에 push
git push [remote-repo-name] [remote-branch-name]

// 로컬, 원격 브랜치 모두 보기
// 있는데 안나오면 git fetch 로 변경사항 받아오기
git branch -a

// 로컬 브랜치와 원격 브랜치가 연동되었으면 파라미터 생략가능
git pull
git push

//===============+===============+===============

// conflict1) 브랜치 간 합병시 conflict

// conflict2) 같은 브랜치를 두 컴퓨터가 건드림
// 한쪽에서 수정해 push 한걸 다른 사람이 pull 받지 않고 과거 버전에서 수정한 후 push 할때 conflict

<< HEAD
// 내 수정내용
====
// 다른 사람 수정내용
>> 0000

다른 작업자랑 합의하거나 하나만 남기고,
git add -A
git commit (인자 없이)
하면 됨.
텍스트 에디터에서 커밋 메세지 나온대로 그대로 저장해주고
git push

//===============+===============+===============

// 로컬 브랜치 삭제
git branch -D [branch-name]

// 원격 브랜치 삭제
git push -d [remote-repo] [remote-branch]
ex) git push -d origin my-idea